-------------------------------------------------------------------------------
Effect engine configuration
===============================================================================

All these values should be set with /set.
Eg: 
/set eff_match_prefix=(> |^)
/set eff_report_default=short

Generally, eff_* prefix indicates something in the effect engine, and effect_*
prefix indicates something specific to a particular effect, probably generated
by the engine.

eff_match_prefix

				This defines a set of characters that are prepended to
				any trigger generated by the Effect engine.  This should
				be in regexp format and be a pattern which will allow
				triggers to fire if the message appears on the same line
				as the player's prompt, but not if the message is sent
				in a tell or similar.

				Eg, for a prompt ending in "> ", use:
						/set eff_match_prefix=(> |^)
				
				You must use /eff_refresh after setting message attributes to
				see the	effect of your changes.

eff_report_default

				Defines which effect report is used by default.  Valid values
				are "short" and "long".

eff_trig_priority
				
				Defines the priority that effect triggers are created with.
				This is the '-p' flag in the /def function.

eff_timeout			When an effect's count reaches 0 (it is no longer applying to
				the player), a timer starts.  When the timer reaches the value
				set by eff_timeout, that effect's details are removed from
				standard reports.  This allows effects to fall away from the
				reports without the user specifically clearing them.

eff_messages_default

				A comma-delimited list of which messages should be shown for
				events by default.  These may be overridden by each effect in
				it's definition, but effects without this defined will use the
				default value.  Valid strings are "up", "down" and "ready".
				Eg:
				/set eff_messages_default="up,down,ready"


-------------------------------------------------------------------------------
Effect engine general commands
===============================================================================

/eff_dropall	Drops all current effects

/eff_refresh	Refreshes all the defined prots to use new values in settings
TODO			such as message attributes.
				
/eff_list		Lists all prots defined by the effect engine.

/eff_clear		Clears effect flags, but leaves things like durations intact.
TODO

/eff_clear_all  Clears all effect records, setting the effect engine back to
TODO			it's initial state.  This includes clearing timings of
				effects.

/er				[E]ffect [r]eport.  Prints a list of the effects currently
				applicable to the player.  This uses the eff_report_default
				setting to determine which report format to use.

/ers			[E]ffect [r]eport - [s]hort.  Prints a list of the effects
			currently applicable to the player, in short form.

/erl			[E]ffect [r]eport - [l]ong.  Prints a list of the effects
			currently applicable to the player, in long form.


-------------------------------------------------------------------------------
Defining effects
===============================================================================

This command defines an effect:

/eff_def [opts] -i"<id>" -n"<name>" -u"<up msg>" -d"<down msg>" [-r"<ready message>"]

-i"<id>"		The [i]d for the prot.  Eg: "SoP".  This cannot contain
				spaces.

-n"<name>"		The [n]ame for the prot.  Eg: "Shield of protection".

-u"<up msg>"	Defines the regular expression used to match against the 
				message shown when the effect goes [u]p.

-d"<down msg>"	Defines the regular expression used to match against the
				message shown when the effect goes [d]own.

-r"<ready msg>"	Defines the regular expression used to match against the
				message shown when the effect is [r]eady to be re-used.  This 
				should be used when the down message indicates the effect has
				fallen, but it cannot be used again until the ready message
				is seen.  (Eg: Paladin Aegis skill, Samurai smwalk)

Valid values for [opts] are defined below.

-ceflmoqstvw

-c"<categories>"
	
				A comma-delimited list of which categories a particular effect 
				belongs to.  These are completely user-defined, but may be used
				used in other methods, such as eff_msg.

-e<secs>		[E]xpected duration.  Use this for setting duration of effects
				before they are timed.  This implies -t (timed).  
				This is useful in conjuction with the -f flag for setting 
				duration on effects which may not give a 'down' message.
				Eg: if you are casting on minions (elementals, familiars, etc).

-f				[F]orce the effect to fall once it's expected duration has
				elapsed.  This is useful for effects which may not give a
				'down' message because they were cast on minions (elementals,
				familiars, etc).

-l<level>		Defines the level of severity of the effect.  Valid values are 
				from 1-5.  Higher level effects will show more pronounced
				messages and icons, as well as having more noticeable colours
				by default.

-m"<flags>"		A comma-delimited list of which messages should be shown for
				this event.  Valid values are "up", "down" and "ready".
				Eg: -m"up,down" -m"ready" -m"down" -m"up,ready"

-o<num>			Indicates an order number for the effect when it is being output
				alongside other prots.  In the case that prots are defined
				with identical order numbers, the effect which was defined first
				will be displayed first.  (Do ordering at time of definition and order by checking ordernum(this) < ordernum(existing)
				-- do ordering by multiplying order_num by 100000 and adding 
				effect_num and ordering based on that

TODO: ORDERING BY ORDERNUM IN V2

-p				Custom priority.  Overrides the default priority for the effect.

-q				[Q]uiet definition.  Supresses "Defined..." message.

-s				Indicates the effect is [s]tackable - that more than one can
				be cast on a single target.  This flag causes the current
				count of this Effect to be displayed in various standard
				outputs.

-t				Indicates that the effect duration should be [t]imed.  This
				flag causes the duration of the previous casting of the
				effect to be displayed in various standard outputs.

-v				Indicates that the duration of the effect is [v]ariable, even when
				cast twice in identical situations.  In future versions, effects
TODO			with this flag will calculate an average time for the duration
				rather than using the time of the previous casting.

-w<secs>		Indicates a warning message should be displayed <secs>
				seconds before the effect is expected to fall.  This flag 
				implies -t.


-------------------------------------------------------------------------------
Effect message output formats
===============================================================================

eff_message_up
eff_message_down
eff_message_warning
eff_message_short
eff_message_long
				
				Defines the default output produced for an effect when it goes
				up, when it goes down, when a warning is given for it and when
				it's current state is being reported on.  For the latter of these
				there are short and long versions defined.
				
				This is a string in which any word which surrounded by '<>' will 
				be replaced with the value of that property of the effect.
				
				You may define optional parts of the output by using the 
				syntax '[<property>?<true>:<false>]'.  If the value of <property>
				is 0, the contents of <false> will be included in the display.
				In any other case, the <true> part will be displayed.
				The contents of both <true> and <false> are evaluated in the same
				way every other part of the string is, so it may contain properties,
				or even further optional sections.
				
				Valid properties are: num, id, name, *count, duration, time,
				*stackable, *timed, *warn. (next_drop??)
				
				Actually, any variable which follows the effect engine naming 
				convention will be available, but these are the standard ones.
				More may be added later.

				For ease of parsing, five special properties are also defined:
				<lt>, <gt>, <lsb>, <rsb>, <c>, <q> being '<', '>' (less and greater
				than) '[' and ']' (left and right square bracket), ':' (colon) and
				'?' (question mark).  Obviously if you use variables with these
				names, they will be ignored by the message parser.
				
				Items marked with an * will probably be useful for defining
				optional sections.

				Note that this DOES allow for nested variables - ie  
				if the value of "tag" is "<tag2>", then "<tag>" will
				be replaced with the value of "tag" ("<tag2>"), then  
				that will be replaced with the value of "tag2". 
				To prevent this sort of nested evaluation (for example
				if you want to put a literal "<" in the value of one 
				of your variables, place a ":" as the first character
				in the tag.  Eg: If "mytag" has the value "<hi>" then
				using "<:mytag>" will insert "<hi>", rather than the
				value of the variable "hi".
								
				The default value for eff_message_short is:
				
				/set effect_msg_short=\
        <effect_id>[<effect_stackable>\              
                ?<lsb><effect_count><rsb>\
                :\
        ]\
        [<effect_timed>\                   
                ?[<effect_count>\        
                        ?<lsb><effect_time>/<effect_duration><rsb>\   
                        :<lsb>DOWN/<effect_duration><rsb>\   
                ]\        
                :[<effect_count>\        
                        ?[<effect_stackable>\
                                ?\
                                :<lsb>UP<rsb>\
                        ]\
                        :[<effect_stackable>\
                                ?\
                                :<lsb>DOWN<rsb>\
                        ]\
                ]\        
        ]\


TODO: ADD PADDING TO TAGS: <effect_duration,3>s =  [ 23s]
NICE FOR HIT REPORTS, ETC
				
				This gives short output like: 

				Stackable only:		SoP[2]
				Stackable, down:	SoP[0]
				Timed and up:		AoG[156/356s]
				Timed and down:		AoG[DOWN/356s]
				Stackable, timed:	SoP[2][124/356s]
				Stack, timed, down:	SoP[0][DOWN/234s]
				Neither, up:		InnerPower[UP]
				Neither, down:		InnerPower[DOWN]
				
				In a report, this might look like:

				[+] SoP[2] - InnerPower[134/250s] - Sneak[UP]
				[-] Regen[DOWN/500s] - AoG[DOWN/380s]

				The default value for eff_message_long is:

				<name> is [count:up. [stackable:Count<c> <count>.:] [timed:Falls in <drops>s.:]:down.]
				
				This is usually used on a line by itself:

				Shield of Protection count: 2. Falls in 34s.
				Shield of Protection is down.


-------------------------------------------------------------------------------
Effect reporting
===============================================================================

/eff_rep 

TODO:
/set eff_rep_default
				Sets the default arguments passed to eff_rep
				if no arguments are given at the command line.

/set eff_com
				The value of eff_com defines how messages are output.  If the
				value is 'echo', tf's echo method is used.  Any other value
				will be prepended to every message and sent to the mud.  This
				means setting eff_com to things like 'say' can be useful.
				You can override this default by using the -c 

eff_rep is will report the status of various effects, depending on the 
arguments supplied to it.

-v outputs in verbose mode (default is brief mode)
-o<string> [o]utputs the report with the supplied string prepended to it.  If
			this string is 'echo', it is echoed to the screen and not sent to
			the mud.
-a overrides the timeout for effects to stop being reported (eff_timeout).

Other flags filter which effects are reported.

-i matches an id
-n matches a name
-u reports only effects with count > 0
-d reports only effects with count < 1
	* note specifying -u and -d together will never report anything
-s reports only effects which stack
-t reports only timed effects
-c reports effects in a particular category
-l reports effects with a particular level

Note that effects must match all the specified parameters in order to
be reported.



-------------------------------------------------------------------------------
Effect icons
===============================================================================

Prepends output with icons representing the type of event.
For example: 

[#] AoG[124/256s] SoP[2] InnerPower[UP]
[+] Shield of protection up.  Count: 2.
[+] Armour of God up.  Previous duration: 386s
[-] Inner power down.  Duration: 457s
[!] Warning!! Iron Will will fall in 10 seconds!!

/set eff_icons=1
/set eff_icon_report=[#]
/set eff_icon_up=[+]
/set eff_icon_down=[-]
/set eff_icon_warning=[!]


-------------------------------------------------------------------------------
Effect list
===============================================================================

Shows which effects are defined.

/eff_list

-v outputs in verbose mode (default is brief mode)
-i matches an id
-n matches a name
-u reports only effects with count > 0
-d reports only effects with count < 1
	* note specifying -u and -d together will never report anything
-s reports only effects which stack
-t reports only timed effects
-c reports effects in a particular category
-l reports effects with a particular level


-------------------------------------------------------------------------------
Effects on status bar
===============================================================================

/set eff_status_update_period=<secs>

					Defines how many second between updates to status
					variables as described below.

/eff_status_add <id> <pattern>
					
					Creates a new variable named 'effect_<id>_status' which
					contains the evaluated string result of <pattern>.  

/eff_status_remove

					Removes an effect from being updated.

					The status update will be started as soon as you add
					any effect status patterns with eff_status_add, and will
					update all status values at a period defined by
					eff_status_update_period.  This defaults to every 4 seconds.



-------------------------------------------------------------------------------

v2: Intepretive effect-setting

IE: When you see 'That would harm previous barkskins', we know that effect_barkskin_count should = 2

/eff_int -i<id> -m"<message>" = up ??


DONE: Using a different output channel on a report-by-report basis.  Ie: /eff_rep -o"echo" or /eff_rep -o"party_say", or even /eff_rep -o<prot_channel> which would take the value of that variable
DONE: Make sure icons are on everything
DONE: Make sure eff_com is always used

TODO: Make message formats for warnings/up/down messages
TODO: Get process id so we can kill the warning if effect falls before the warning is due





